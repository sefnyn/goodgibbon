# Makefile.in generated by automake 1.11.6 from Makefile.am.
# libgsgf/tests/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011 Free Software
# Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# This file is part of Gibbon, a graphical frontend to the First Internet 
# Backgammon Server FIBS.
# Copyright (C) 2009-2012 Guido Flohr, http://guido-flohr.net/.
#
# Gibbon is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Gibbon is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Gibbon.  If not, see <http://www.gnu.org/licenses/>.



am__make_dryrun = \
  { \
    am__dry=no; \
    case $$MAKEFLAGS in \
      *\\[\ \	]*) \
        echo 'am--echo: ; @echo "AM"  OK' | $(MAKE) -f - 2>/dev/null \
          | grep '^AM OK$$' >/dev/null || am__dry=yes;; \
      *) \
        for am__flg in $$MAKEFLAGS; do \
          case $$am__flg in \
            *=*|--*) ;; \
            *n*) am__dry=yes; break;; \
          esac; \
        done;; \
    esac; \
    test $$am__dry = yes; \
  }
pkgdatadir = $(datadir)/gibbon
pkgincludedir = $(includedir)/gibbon
pkglibdir = $(libdir)/gibbon
pkglibexecdir = $(libexecdir)/gibbon
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
TESTS = $(am__EXEEXT_1) $(TESTS_SH)
check_PROGRAMS = $(am__EXEEXT_1)
noinst_PROGRAMS = gsgf-write-back$(EXEEXT)
subdir = libgsgf/tests
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in $(srcdir)/compressed-list.sgf.in \
	$(srcdir)/full.sgf.in $(srcdir)/utf-8.sgf.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/m4/gcreate_class.m4 \
	$(top_srcdir)/m4/gtk-doc.m4 $(top_srcdir)/m4/intltool.m4 \
	$(top_srcdir)/m4/libtool.m4 $(top_srcdir)/m4/ltoptions.m4 \
	$(top_srcdir)/m4/ltsugar.m4 $(top_srcdir)/m4/ltversion.m4 \
	$(top_srcdir)/m4/lt~obsolete.m4 $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES = compressed-list.sgf full.sgf utf-8.sgf
CONFIG_CLEAN_VPATH_FILES =
am__EXEEXT_1 = test-convert$(EXEEXT) test-compose$(EXEEXT) \
	test-compressed-list$(EXEEXT) test-date$(EXEEXT) \
	test-empty$(EXEEXT) test-full$(EXEEXT) \
	test-game-info-properties$(EXEEXT) \
	test-markup-properties$(EXEEXT) test-minimal$(EXEEXT) \
	test-misc-properties$(EXEEXT) test-multi-game-tree$(EXEEXT) \
	test-move-annotation$(EXEEXT) test-move-properties$(EXEEXT) \
	test-nested-game-tree$(EXEEXT) test-node-annotation$(EXEEXT) \
	test-non-unique-points$(EXEEXT) test-number$(EXEEXT) \
	test-real$(EXEEXT) test-real-to-string$(EXEEXT) \
	test-really-empty$(EXEEXT) test-root-properties$(EXEEXT) \
	test-setup-properties$(EXEEXT) test-timing-properties$(EXEEXT) \
	test-util-read-simpletext$(EXEEXT) \
	test-util-read-text$(EXEEXT) test-write-empty$(EXEEXT) \
	test-write-empty-property$(EXEEXT) test-write-full$(EXEEXT) \
	test-write-linefeeds$(EXEEXT) test-write-minimal$(EXEEXT) \
	test-formatd$(EXEEXT)
PROGRAMS = $(noinst_PROGRAMS)
am_gsgf_write_back_OBJECTS = gsgf-write-back.$(OBJEXT)
gsgf_write_back_OBJECTS = $(am_gsgf_write_back_OBJECTS)
gsgf_write_back_LDADD = $(LDADD)
am__DEPENDENCIES_1 =
gsgf_write_back_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
AM_V_lt = $(am__v_lt_$(V))
am__v_lt_ = $(am__v_lt_$(AM_DEFAULT_VERBOSITY))
am__v_lt_0 = --silent
am_test_compose_OBJECTS = lib.$(OBJEXT) test-compose.$(OBJEXT)
test_compose_OBJECTS = $(am_test_compose_OBJECTS)
test_compose_LDADD = $(LDADD)
test_compose_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_compressed_list_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-compressed-list.$(OBJEXT)
test_compressed_list_OBJECTS = $(am_test_compressed_list_OBJECTS)
test_compressed_list_LDADD = $(LDADD)
test_compressed_list_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_convert_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-convert.$(OBJEXT)
test_convert_OBJECTS = $(am_test_convert_OBJECTS)
test_convert_LDADD = $(LDADD)
test_convert_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_date_OBJECTS = lib.$(OBJEXT) test-date.$(OBJEXT)
test_date_OBJECTS = $(am_test_date_OBJECTS)
test_date_LDADD = $(LDADD)
test_date_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_empty_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-empty.$(OBJEXT)
test_empty_OBJECTS = $(am_test_empty_OBJECTS)
test_empty_LDADD = $(LDADD)
test_empty_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_formatd_OBJECTS = test-formatd.$(OBJEXT)
test_formatd_OBJECTS = $(am_test_formatd_OBJECTS)
test_formatd_LDADD = $(LDADD)
test_formatd_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_full_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-full.$(OBJEXT)
test_full_OBJECTS = $(am_test_full_OBJECTS)
test_full_LDADD = $(LDADD)
test_full_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_game_info_properties_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-game-info-properties.$(OBJEXT)
test_game_info_properties_OBJECTS =  \
	$(am_test_game_info_properties_OBJECTS)
test_game_info_properties_LDADD = $(LDADD)
test_game_info_properties_DEPENDENCIES = ../libgsgf.a \
	$(am__DEPENDENCIES_1)
am_test_markup_properties_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-markup-properties.$(OBJEXT)
test_markup_properties_OBJECTS = $(am_test_markup_properties_OBJECTS)
test_markup_properties_LDADD = $(LDADD)
test_markup_properties_DEPENDENCIES = ../libgsgf.a \
	$(am__DEPENDENCIES_1)
am_test_minimal_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-minimal.$(OBJEXT)
test_minimal_OBJECTS = $(am_test_minimal_OBJECTS)
test_minimal_LDADD = $(LDADD)
test_minimal_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_misc_properties_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-misc-properties.$(OBJEXT)
test_misc_properties_OBJECTS = $(am_test_misc_properties_OBJECTS)
test_misc_properties_LDADD = $(LDADD)
test_misc_properties_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_move_annotation_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-move-annotation.$(OBJEXT)
test_move_annotation_OBJECTS = $(am_test_move_annotation_OBJECTS)
test_move_annotation_LDADD = $(LDADD)
test_move_annotation_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_move_properties_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-move-properties.$(OBJEXT)
test_move_properties_OBJECTS = $(am_test_move_properties_OBJECTS)
test_move_properties_LDADD = $(LDADD)
test_move_properties_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_multi_game_tree_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-multi-game-tree.$(OBJEXT)
test_multi_game_tree_OBJECTS = $(am_test_multi_game_tree_OBJECTS)
test_multi_game_tree_LDADD = $(LDADD)
test_multi_game_tree_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_nested_game_tree_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-nested-game-tree.$(OBJEXT)
test_nested_game_tree_OBJECTS = $(am_test_nested_game_tree_OBJECTS)
test_nested_game_tree_LDADD = $(LDADD)
test_nested_game_tree_DEPENDENCIES = ../libgsgf.a \
	$(am__DEPENDENCIES_1)
am_test_node_annotation_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-node-annotation.$(OBJEXT)
test_node_annotation_OBJECTS = $(am_test_node_annotation_OBJECTS)
test_node_annotation_LDADD = $(LDADD)
test_node_annotation_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_non_unique_points_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-non-unique-points.$(OBJEXT)
test_non_unique_points_OBJECTS = $(am_test_non_unique_points_OBJECTS)
test_non_unique_points_LDADD = $(LDADD)
test_non_unique_points_DEPENDENCIES = ../libgsgf.a \
	$(am__DEPENDENCIES_1)
am_test_number_OBJECTS = lib.$(OBJEXT) test-number.$(OBJEXT)
test_number_OBJECTS = $(am_test_number_OBJECTS)
test_number_LDADD = $(LDADD)
test_number_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_real_OBJECTS = lib.$(OBJEXT) test-real.$(OBJEXT)
test_real_OBJECTS = $(am_test_real_OBJECTS)
test_real_LDADD = $(LDADD)
test_real_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_real_to_string_OBJECTS = test-real-to-string.$(OBJEXT)
test_real_to_string_OBJECTS = $(am_test_real_to_string_OBJECTS)
test_real_to_string_LDADD = $(LDADD)
test_real_to_string_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_really_empty_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-really-empty.$(OBJEXT)
test_really_empty_OBJECTS = $(am_test_really_empty_OBJECTS)
test_really_empty_LDADD = $(LDADD)
test_really_empty_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_root_properties_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-root-properties.$(OBJEXT)
test_root_properties_OBJECTS = $(am_test_root_properties_OBJECTS)
test_root_properties_LDADD = $(LDADD)
test_root_properties_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_setup_properties_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-setup-properties.$(OBJEXT)
test_setup_properties_OBJECTS = $(am_test_setup_properties_OBJECTS)
test_setup_properties_LDADD = $(LDADD)
test_setup_properties_DEPENDENCIES = ../libgsgf.a \
	$(am__DEPENDENCIES_1)
am_test_timing_properties_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-timing-properties.$(OBJEXT)
test_timing_properties_OBJECTS = $(am_test_timing_properties_OBJECTS)
test_timing_properties_LDADD = $(LDADD)
test_timing_properties_DEPENDENCIES = ../libgsgf.a \
	$(am__DEPENDENCIES_1)
am_test_util_read_simpletext_OBJECTS = lib.$(OBJEXT) \
	test-util-read-simpletext.$(OBJEXT)
test_util_read_simpletext_OBJECTS =  \
	$(am_test_util_read_simpletext_OBJECTS)
test_util_read_simpletext_LDADD = $(LDADD)
test_util_read_simpletext_DEPENDENCIES = ../libgsgf.a \
	$(am__DEPENDENCIES_1)
am_test_util_read_text_OBJECTS = lib.$(OBJEXT) \
	test-util-read-text.$(OBJEXT)
test_util_read_text_OBJECTS = $(am_test_util_read_text_OBJECTS)
test_util_read_text_LDADD = $(LDADD)
test_util_read_text_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_write_empty_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-write-empty.$(OBJEXT)
test_write_empty_OBJECTS = $(am_test_write_empty_OBJECTS)
test_write_empty_LDADD = $(LDADD)
test_write_empty_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_write_empty_property_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-write-empty-property.$(OBJEXT)
test_write_empty_property_OBJECTS =  \
	$(am_test_write_empty_property_OBJECTS)
test_write_empty_property_LDADD = $(LDADD)
test_write_empty_property_DEPENDENCIES = ../libgsgf.a \
	$(am__DEPENDENCIES_1)
am_test_write_full_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-write-full.$(OBJEXT)
test_write_full_OBJECTS = $(am_test_write_full_OBJECTS)
test_write_full_LDADD = $(LDADD)
test_write_full_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_write_linefeeds_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-write-linefeeds.$(OBJEXT)
test_write_linefeeds_OBJECTS = $(am_test_write_linefeeds_OBJECTS)
test_write_linefeeds_LDADD = $(LDADD)
test_write_linefeeds_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
am_test_write_minimal_OBJECTS = lib.$(OBJEXT) main.$(OBJEXT) \
	test-write-minimal.$(OBJEXT)
test_write_minimal_OBJECTS = $(am_test_write_minimal_OBJECTS)
test_write_minimal_LDADD = $(LDADD)
test_write_minimal_DEPENDENCIES = ../libgsgf.a $(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I. -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
am__mv = mv -f
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
AM_V_CC = $(am__v_CC_$(V))
am__v_CC_ = $(am__v_CC_$(AM_DEFAULT_VERBOSITY))
am__v_CC_0 = @echo "  CC    " $@;
AM_V_at = $(am__v_at_$(V))
am__v_at_ = $(am__v_at_$(AM_DEFAULT_VERBOSITY))
am__v_at_0 = @
CCLD = $(CC)
LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \
	$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
AM_V_CCLD = $(am__v_CCLD_$(V))
am__v_CCLD_ = $(am__v_CCLD_$(AM_DEFAULT_VERBOSITY))
am__v_CCLD_0 = @echo "  CCLD  " $@;
AM_V_GEN = $(am__v_GEN_$(V))
am__v_GEN_ = $(am__v_GEN_$(AM_DEFAULT_VERBOSITY))
am__v_GEN_0 = @echo "  GEN   " $@;
SOURCES = $(gsgf_write_back_SOURCES) $(test_compose_SOURCES) \
	$(test_compressed_list_SOURCES) $(test_convert_SOURCES) \
	$(test_date_SOURCES) $(test_empty_SOURCES) \
	$(test_formatd_SOURCES) $(test_full_SOURCES) \
	$(test_game_info_properties_SOURCES) \
	$(test_markup_properties_SOURCES) $(test_minimal_SOURCES) \
	$(test_misc_properties_SOURCES) \
	$(test_move_annotation_SOURCES) \
	$(test_move_properties_SOURCES) \
	$(test_multi_game_tree_SOURCES) \
	$(test_nested_game_tree_SOURCES) \
	$(test_node_annotation_SOURCES) \
	$(test_non_unique_points_SOURCES) $(test_number_SOURCES) \
	$(test_real_SOURCES) $(test_real_to_string_SOURCES) \
	$(test_really_empty_SOURCES) $(test_root_properties_SOURCES) \
	$(test_setup_properties_SOURCES) \
	$(test_timing_properties_SOURCES) \
	$(test_util_read_simpletext_SOURCES) \
	$(test_util_read_text_SOURCES) $(test_write_empty_SOURCES) \
	$(test_write_empty_property_SOURCES) \
	$(test_write_full_SOURCES) $(test_write_linefeeds_SOURCES) \
	$(test_write_minimal_SOURCES)
DIST_SOURCES = $(gsgf_write_back_SOURCES) $(test_compose_SOURCES) \
	$(test_compressed_list_SOURCES) $(test_convert_SOURCES) \
	$(test_date_SOURCES) $(test_empty_SOURCES) \
	$(test_formatd_SOURCES) $(test_full_SOURCES) \
	$(test_game_info_properties_SOURCES) \
	$(test_markup_properties_SOURCES) $(test_minimal_SOURCES) \
	$(test_misc_properties_SOURCES) \
	$(test_move_annotation_SOURCES) \
	$(test_move_properties_SOURCES) \
	$(test_multi_game_tree_SOURCES) \
	$(test_nested_game_tree_SOURCES) \
	$(test_node_annotation_SOURCES) \
	$(test_non_unique_points_SOURCES) $(test_number_SOURCES) \
	$(test_real_SOURCES) $(test_real_to_string_SOURCES) \
	$(test_really_empty_SOURCES) $(test_root_properties_SOURCES) \
	$(test_setup_properties_SOURCES) \
	$(test_timing_properties_SOURCES) \
	$(test_util_read_simpletext_SOURCES) \
	$(test_util_read_text_SOURCES) $(test_write_empty_SOURCES) \
	$(test_write_empty_property_SOURCES) \
	$(test_write_full_SOURCES) $(test_write_linefeeds_SOURCES) \
	$(test_write_minimal_SOURCES)
am__can_run_installinfo = \
  case $$AM_UPDATE_INFO_DIR in \
    n|no|NO) false;; \
    *) (install-info --version) >/dev/null 2>&1;; \
  esac
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
# If stdout is a non-dumb tty, use colors.  If test -t is not supported,
# then this fails; a conservative approach.  Of course do not redirect
# stdout here, just stderr.
am__tty_colors = \
red=; grn=; lgn=; blu=; std=; \
test "X$(AM_COLOR_TESTS)" != Xno \
&& test "X$$TERM" != Xdumb \
&& { test "X$(AM_COLOR_TESTS)" = Xalways || test -t 1 2>/dev/null; } \
&& { \
  red='[0;31m'; \
  grn='[0;32m'; \
  lgn='[1;32m'; \
  blu='[1;34m'; \
  std='[m'; \
}
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/ns/goodgibbon/missing --run aclocal-1.11
ACLOCAL_AMFLAGS =  -I m4
ALL_LINGUAS = 
AMTAR = $${TAR-tar}
AM_DEFAULT_VERBOSITY = 0
AR = ar
AUTOCONF = ${SHELL} /home/ns/goodgibbon/missing --run autoconf
AUTOHEADER = ${SHELL} /home/ns/goodgibbon/missing --run autoheader
AUTOMAKE = ${SHELL} /home/ns/goodgibbon/missing --run automake-1.11
AWK = gawk
CATALOGS = 
CATOBJEXT = .gmo
CC = gcc -fcommon
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -fcommon -E
CPPFLAGS = 
CYGPATH_W = echo
DATADIRNAME = share
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
DLLTOOL = false
DSYMUTIL = 
DUMPBIN = 
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
FGREP = /bin/grep -F
GCREATE_CLASS_CHMOD = /bin/chmod
GCREATE_CLASS_COPYRIGHT = 2009-2012 Guido Flohr, http://guido-flohr.net/
GCREATE_CLASS_DESCRIPTION = Gibbon is a Gtk+ frontend for the First Internet Backgammon Server FIBS.
GCREATE_CLASS_PERL = /bin/perl
GETTEXT_PACKAGE = gibbon
GIBBON_CFLAGS = -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/librsvg-2.0 -I/usr/include/libmount -I/usr/include/blkid -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/libpng16 -I/usr/include/x86_64-linux-gnu -I/usr/include/cairo -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/gtk-2.0 -I/usr/lib/x86_64-linux-gnu/gtk-2.0/include -I/usr/include/pango-1.0 -I/usr/include/harfbuzz -I/usr/include/fribidi -I/usr/include/atk-1.0 -pthread -I/usr/include/libxml2 
GIBBON_COMMA_VERSION = 0,2,0
GIBBON_LIBS = -lrsvg-2 -lm -lgtk-x11-2.0 -lgdk-x11-2.0 -lpangocairo-1.0 -latk-1.0 -lcairo -lgdk_pixbuf-2.0 -lgio-2.0 -lpangoft2-1.0 -lpango-1.0 -lgobject-2.0 -lharfbuzz -lfontconfig -lfreetype -lgthread-2.0 -pthread -lglib-2.0 -lpng16 -lxml2 -lsqlite3 -lz  -ljpeg
GIBBON_PKGCONFIG_REQUIREMENTS =  glib-2.0 >= 2.26.0, librsvg-2.0 >= 2.32.1, gtk+-2.0 >= 2.24.0, gthread-2.0 >= 2.20.5, libpng >= 0.23, libxml-2.0 >= 2.7.3, sqlite3 >= 3.6.19, zlib >= 1.2.3
GLIB_COMPILE_SCHEMAS = /usr/lib/x86_64-linux-gnu/glib-2.0/glib-compile-schemas
GMOFILES = 
GMSGFMT = /bin/msgfmt
GREP = /bin/grep
GSETTINGS_DISABLE_SCHEMAS_COMPILE = 
GTKDOC_CHECK = /bin/gtkdoc-check
GTKDOC_DEPS_CFLAGS = 
GTKDOC_DEPS_LIBS = 
GTKDOC_MKPDF = /bin/gtkdoc-mkpdf
GTKDOC_REBASE = /bin/gtkdoc-rebase
GZIP = /bin/gzip
HELP_DIR = ${datadir}/help
HTML_DIR = ${datadir}/gtk-doc/html
INSTALL = /bin/install -c
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = $(install_sh) -c -s
INSTOBJEXT = .mo
INTLLIBS = 
INTLTOOL_EXTRACT = /bin/intltool-extract
INTLTOOL_MERGE = /bin/intltool-merge
INTLTOOL_PERL = /bin/perl
INTLTOOL_UPDATE = /bin/intltool-update
INTLTOOL_V_MERGE = $(INTLTOOL__v_MERGE_$(V))
INTLTOOL_V_MERGE_OPTIONS = $(intltool__v_merge_options_$(V))
INTLTOOL__v_MERGE_ = $(INTLTOOL__v_MERGE_$(AM_DEFAULT_VERBOSITY))
INTLTOOL__v_MERGE_0 = @echo "  ITMRG " $@;
ITSTOOL = itstool
LD = /bin/ld -m elf_x86_64
LDFLAGS = 
LEX = :
LEXLIB = 
LEX_OUTPUT_ROOT = 
LIBOBJS = 
LIBS = -lnsl 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LINKS = 
LIPO = 
LN_S = ln -s
LTLIBOBJS = 
LWP_REQUEST = /bin/lwp-request
LYNX = /bin/lynx
MAINT = #
MAKEINFO = ${SHELL} /home/ns/goodgibbon/missing --run makeinfo
MANIFEST_TOOL = :
MKDIR_P = /bin/mkdir -p
MKINSTALLDIRS = .//mkinstalldirs
MSGFMT = /bin/msgfmt
MSGFMT_OPTS = -c
MSGMERGE = /bin/msgmerge
NM = /bin/nm -B
NMEDIT = 
OBJDUMP = objdump
OBJEXT = o
OTOOL = 
OTOOL64 = 
PACKAGE = gibbon
PACKAGE_BUGREPORT = mailto:guido@imperia.net
PACKAGE_NAME = gibbon
PACKAGE_STRING = gibbon 0.2.0
PACKAGE_TARNAME = gibbon
PACKAGE_URL = http://guido-flohr.net/projects/gibbon
PACKAGE_VERSION = 0.2.0
PATH_SEPARATOR = :
PKG_CONFIG = /bin/pkg-config
PKG_CONFIG_LIBDIR = 
PKG_CONFIG_PATH = 
POFILES = 
POSUB = po
PO_IN_DATADIR_FALSE = 
PO_IN_DATADIR_TRUE = 
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/bash
STRIP = strip
USE_NLS = yes
VERSION = 0.2.0
W3M = 
WGET = /bin/wget
WINDRES = 
XGETTEXT = /bin/xgettext
XMLLINT = xmllint
YACC = byacc
YFLAGS = 
abs_builddir = /home/ns/goodgibbon/libgsgf/tests
abs_srcdir = /home/ns/goodgibbon/libgsgf/tests
abs_top_builddir = /home/ns/goodgibbon
abs_top_srcdir = /home/ns/goodgibbon
ac_ct_AR = ar
ac_ct_CC = gcc -fcommon
ac_ct_DUMPBIN = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = $${TAR-tar} chof - "$$tardir"
am__untar = $${TAR-tar} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
builddir = .
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE_TARNAME}
dvidir = ${docdir}
exec_prefix = ${prefix}
gsettingsschemadir = ${datarootdir}/glib-2.0/schemas
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = ${SHELL} /home/ns/goodgibbon/install-sh
intltool__v_merge_options_ = $(intltool__v_merge_options_$(AM_DEFAULT_VERBOSITY))
intltool__v_merge_options_0 = -q
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = /bin/mkdir -p
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
srcdir = .
sysconfdir = ${prefix}/etc
target_alias = 
top_build_prefix = ../../
top_builddir = ../..
top_srcdir = ../..
AUTOMAKE_OPTIONS = color-tests
TESTS_C = test-convert			\
	  test-compose			\
	  test-compressed-list		\
	  test-date			\
	  test-empty 			\
	  test-full			\
	  test-game-info-properties	\
	  test-markup-properties	\
	  test-minimal			\
	  test-misc-properties		\
	  test-multi-game-tree		\
	  test-move-annotation		\
	  test-move-properties		\
	  test-nested-game-tree		\
	  test-node-annotation		\
	  test-non-unique-points	\
	  test-number			\
	  test-real			\
	  test-real-to-string		\
	  test-really-empty		\
	  test-root-properties		\
	  test-setup-properties		\
	  test-timing-properties	\
	  test-util-read-simpletext	\
	  test-util-read-text		\
	  test-write-empty		\
	  test-write-empty-property	\
	  test-write-full		\
	  test-write-linefeeds		\
	  test-write-minimal		\
	  test-formatd

TESTS_SH = test-write-stream
AM_CPPFLAGS = \
    -I$(top_srcdir)			\
    -DTEST_DIR=\"$(abs_srcdir)\"	\
    -DTEST_BUILDDIR=\"$(abs_builddir)\"	\
    $(GIBBON_CFLAGS)

LDADD = ../libgsgf.a $(GIBBON_LIBS) 
test_convert_SOURCES = lib.c main.c test-convert.c
test_compose_SOURCES = lib.c test-compose.c
test_compressed_list_SOURCES = lib.c main.c test-compressed-list.c
test_date_SOURCES = lib.c test-date.c
test_empty_SOURCES = lib.c main.c test-empty.c
test_full_SOURCES = lib.c main.c test-full.c
test_markup_properties_SOURCES = lib.c main.c test-markup-properties.c
test_game_info_properties_SOURCES = lib.c main.c test-game-info-properties.c
test_minimal_SOURCES = lib.c main.c test-minimal.c
test_misc_properties_SOURCES = lib.c main.c test-misc-properties.c
test_move_properties_SOURCES = lib.c main.c test-move-properties.c
test_move_annotation_SOURCES = lib.c main.c test-move-annotation.c
test_multi_game_tree_SOURCES = lib.c main.c test-multi-game-tree.c
test_nested_game_tree_SOURCES = lib.c main.c test-nested-game-tree.c
test_node_annotation_SOURCES = lib.c main.c test-node-annotation.c
test_non_unique_points_SOURCES = lib.c main.c test-non-unique-points.c
test_number_SOURCES = lib.c test-number.c
test_real_SOURCES = lib.c test-real.c
test_real_to_string_SOURCES = test-real-to-string.c
test_really_empty_SOURCES = lib.c main.c test-really-empty.c
test_root_properties_SOURCES = lib.c main.c test-root-properties.c
test_setup_properties_SOURCES = lib.c main.c test-setup-properties.c
test_timing_properties_SOURCES = lib.c main.c test-timing-properties.c
test_util_read_simpletext_SOURCES = lib.c test-util-read-simpletext.c
test_util_read_text_SOURCES = lib.c test-util-read-text.c
test_write_empty_SOURCES = lib.c main.c test-write-empty.c
test_write_empty_property_SOURCES = lib.c main.c test-write-empty-property.c
test_write_full_SOURCES = lib.c main.c test-write-full.c
test_write_linefeeds_SOURCES = lib.c main.c test-write-linefeeds.c
test_write_minimal_SOURCES = lib.c main.c test-write-minimal.c
test_formatd_SOURCES = test-formatd.c
gsgf_write_back_SOURCES = gsgf-write-back.c
noinst_HEADERS = test.h
SGF_IN_FILES = compressed-list.sgf.in	\
	       full.sgf.in		\
	       utf-8.sgf.in

SGF_FILES_GENERATED = $(SGF_IN_FILES:.in=)
SGF_FILES = cp1251.sgf			\
	    empty.sgf 			\
	    game-info-properties.sgf	\
	    linefeeds.sgf		\
	    markup-properties.sgf	\
	    minimal.sgf			\
	    move-annotation.sgf		\
	    move-properties.sgf		\
	    misc-properties.sgf		\
	    multi-game-tree.sgf		\
	    nested-game-tree.sgf	\
	    node-annotation.sgf		\
	    non-unique-points.sgf	\
	    really-empty.sgf		\
	    root-properties.sgf		\
	    setup-properties.sgf	\
	    timing-properties.sgf

TESTS_ENVIRONMENT = builddir=$(builddir) \
                    top_srcdir=$(top_srcdir) \
                    top_builddir=$(top_builddir) \
                    SGF_FILES="$(SGF_FILES) $(SGF_IN_FILES)"

EXTRA_DIST = $(SGF_FILES) $(SGF_IN_FILES) $(TESTS_SH)
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in: # $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      ( cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh ) \
	        && { if test -f $@; then exit 0; else break; fi; }; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu libgsgf/tests/Makefile'; \
	$(am__cd) $(top_srcdir) && \
	  $(AUTOMAKE) --gnu libgsgf/tests/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure: # $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4): # $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(am__aclocal_m4_deps):
compressed-list.sgf: $(top_builddir)/config.status $(srcdir)/compressed-list.sgf.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
full.sgf: $(top_builddir)/config.status $(srcdir)/full.sgf.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@
utf-8.sgf: $(top_builddir)/config.status $(srcdir)/utf-8.sgf.in
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list

clean-noinstPROGRAMS:
	@list='$(noinst_PROGRAMS)'; test -n "$$list" || exit 0; \
	echo " rm -f" $$list; \
	rm -f $$list || exit $$?; \
	test -n "$(EXEEXT)" || exit 0; \
	list=`for p in $$list; do echo "$$p"; done | sed 's/$(EXEEXT)$$//'`; \
	echo " rm -f" $$list; \
	rm -f $$list
gsgf-write-back$(EXEEXT): $(gsgf_write_back_OBJECTS) $(gsgf_write_back_DEPENDENCIES) $(EXTRA_gsgf_write_back_DEPENDENCIES) 
	@rm -f gsgf-write-back$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(gsgf_write_back_OBJECTS) $(gsgf_write_back_LDADD) $(LIBS)
test-compose$(EXEEXT): $(test_compose_OBJECTS) $(test_compose_DEPENDENCIES) $(EXTRA_test_compose_DEPENDENCIES) 
	@rm -f test-compose$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_compose_OBJECTS) $(test_compose_LDADD) $(LIBS)
test-compressed-list$(EXEEXT): $(test_compressed_list_OBJECTS) $(test_compressed_list_DEPENDENCIES) $(EXTRA_test_compressed_list_DEPENDENCIES) 
	@rm -f test-compressed-list$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_compressed_list_OBJECTS) $(test_compressed_list_LDADD) $(LIBS)
test-convert$(EXEEXT): $(test_convert_OBJECTS) $(test_convert_DEPENDENCIES) $(EXTRA_test_convert_DEPENDENCIES) 
	@rm -f test-convert$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_convert_OBJECTS) $(test_convert_LDADD) $(LIBS)
test-date$(EXEEXT): $(test_date_OBJECTS) $(test_date_DEPENDENCIES) $(EXTRA_test_date_DEPENDENCIES) 
	@rm -f test-date$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_date_OBJECTS) $(test_date_LDADD) $(LIBS)
test-empty$(EXEEXT): $(test_empty_OBJECTS) $(test_empty_DEPENDENCIES) $(EXTRA_test_empty_DEPENDENCIES) 
	@rm -f test-empty$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_empty_OBJECTS) $(test_empty_LDADD) $(LIBS)
test-formatd$(EXEEXT): $(test_formatd_OBJECTS) $(test_formatd_DEPENDENCIES) $(EXTRA_test_formatd_DEPENDENCIES) 
	@rm -f test-formatd$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_formatd_OBJECTS) $(test_formatd_LDADD) $(LIBS)
test-full$(EXEEXT): $(test_full_OBJECTS) $(test_full_DEPENDENCIES) $(EXTRA_test_full_DEPENDENCIES) 
	@rm -f test-full$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_full_OBJECTS) $(test_full_LDADD) $(LIBS)
test-game-info-properties$(EXEEXT): $(test_game_info_properties_OBJECTS) $(test_game_info_properties_DEPENDENCIES) $(EXTRA_test_game_info_properties_DEPENDENCIES) 
	@rm -f test-game-info-properties$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_game_info_properties_OBJECTS) $(test_game_info_properties_LDADD) $(LIBS)
test-markup-properties$(EXEEXT): $(test_markup_properties_OBJECTS) $(test_markup_properties_DEPENDENCIES) $(EXTRA_test_markup_properties_DEPENDENCIES) 
	@rm -f test-markup-properties$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_markup_properties_OBJECTS) $(test_markup_properties_LDADD) $(LIBS)
test-minimal$(EXEEXT): $(test_minimal_OBJECTS) $(test_minimal_DEPENDENCIES) $(EXTRA_test_minimal_DEPENDENCIES) 
	@rm -f test-minimal$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_minimal_OBJECTS) $(test_minimal_LDADD) $(LIBS)
test-misc-properties$(EXEEXT): $(test_misc_properties_OBJECTS) $(test_misc_properties_DEPENDENCIES) $(EXTRA_test_misc_properties_DEPENDENCIES) 
	@rm -f test-misc-properties$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_misc_properties_OBJECTS) $(test_misc_properties_LDADD) $(LIBS)
test-move-annotation$(EXEEXT): $(test_move_annotation_OBJECTS) $(test_move_annotation_DEPENDENCIES) $(EXTRA_test_move_annotation_DEPENDENCIES) 
	@rm -f test-move-annotation$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_move_annotation_OBJECTS) $(test_move_annotation_LDADD) $(LIBS)
test-move-properties$(EXEEXT): $(test_move_properties_OBJECTS) $(test_move_properties_DEPENDENCIES) $(EXTRA_test_move_properties_DEPENDENCIES) 
	@rm -f test-move-properties$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_move_properties_OBJECTS) $(test_move_properties_LDADD) $(LIBS)
test-multi-game-tree$(EXEEXT): $(test_multi_game_tree_OBJECTS) $(test_multi_game_tree_DEPENDENCIES) $(EXTRA_test_multi_game_tree_DEPENDENCIES) 
	@rm -f test-multi-game-tree$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_multi_game_tree_OBJECTS) $(test_multi_game_tree_LDADD) $(LIBS)
test-nested-game-tree$(EXEEXT): $(test_nested_game_tree_OBJECTS) $(test_nested_game_tree_DEPENDENCIES) $(EXTRA_test_nested_game_tree_DEPENDENCIES) 
	@rm -f test-nested-game-tree$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_nested_game_tree_OBJECTS) $(test_nested_game_tree_LDADD) $(LIBS)
test-node-annotation$(EXEEXT): $(test_node_annotation_OBJECTS) $(test_node_annotation_DEPENDENCIES) $(EXTRA_test_node_annotation_DEPENDENCIES) 
	@rm -f test-node-annotation$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_node_annotation_OBJECTS) $(test_node_annotation_LDADD) $(LIBS)
test-non-unique-points$(EXEEXT): $(test_non_unique_points_OBJECTS) $(test_non_unique_points_DEPENDENCIES) $(EXTRA_test_non_unique_points_DEPENDENCIES) 
	@rm -f test-non-unique-points$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_non_unique_points_OBJECTS) $(test_non_unique_points_LDADD) $(LIBS)
test-number$(EXEEXT): $(test_number_OBJECTS) $(test_number_DEPENDENCIES) $(EXTRA_test_number_DEPENDENCIES) 
	@rm -f test-number$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_number_OBJECTS) $(test_number_LDADD) $(LIBS)
test-real$(EXEEXT): $(test_real_OBJECTS) $(test_real_DEPENDENCIES) $(EXTRA_test_real_DEPENDENCIES) 
	@rm -f test-real$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_real_OBJECTS) $(test_real_LDADD) $(LIBS)
test-real-to-string$(EXEEXT): $(test_real_to_string_OBJECTS) $(test_real_to_string_DEPENDENCIES) $(EXTRA_test_real_to_string_DEPENDENCIES) 
	@rm -f test-real-to-string$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_real_to_string_OBJECTS) $(test_real_to_string_LDADD) $(LIBS)
test-really-empty$(EXEEXT): $(test_really_empty_OBJECTS) $(test_really_empty_DEPENDENCIES) $(EXTRA_test_really_empty_DEPENDENCIES) 
	@rm -f test-really-empty$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_really_empty_OBJECTS) $(test_really_empty_LDADD) $(LIBS)
test-root-properties$(EXEEXT): $(test_root_properties_OBJECTS) $(test_root_properties_DEPENDENCIES) $(EXTRA_test_root_properties_DEPENDENCIES) 
	@rm -f test-root-properties$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_root_properties_OBJECTS) $(test_root_properties_LDADD) $(LIBS)
test-setup-properties$(EXEEXT): $(test_setup_properties_OBJECTS) $(test_setup_properties_DEPENDENCIES) $(EXTRA_test_setup_properties_DEPENDENCIES) 
	@rm -f test-setup-properties$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_setup_properties_OBJECTS) $(test_setup_properties_LDADD) $(LIBS)
test-timing-properties$(EXEEXT): $(test_timing_properties_OBJECTS) $(test_timing_properties_DEPENDENCIES) $(EXTRA_test_timing_properties_DEPENDENCIES) 
	@rm -f test-timing-properties$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_timing_properties_OBJECTS) $(test_timing_properties_LDADD) $(LIBS)
test-util-read-simpletext$(EXEEXT): $(test_util_read_simpletext_OBJECTS) $(test_util_read_simpletext_DEPENDENCIES) $(EXTRA_test_util_read_simpletext_DEPENDENCIES) 
	@rm -f test-util-read-simpletext$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_util_read_simpletext_OBJECTS) $(test_util_read_simpletext_LDADD) $(LIBS)
test-util-read-text$(EXEEXT): $(test_util_read_text_OBJECTS) $(test_util_read_text_DEPENDENCIES) $(EXTRA_test_util_read_text_DEPENDENCIES) 
	@rm -f test-util-read-text$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_util_read_text_OBJECTS) $(test_util_read_text_LDADD) $(LIBS)
test-write-empty$(EXEEXT): $(test_write_empty_OBJECTS) $(test_write_empty_DEPENDENCIES) $(EXTRA_test_write_empty_DEPENDENCIES) 
	@rm -f test-write-empty$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_write_empty_OBJECTS) $(test_write_empty_LDADD) $(LIBS)
test-write-empty-property$(EXEEXT): $(test_write_empty_property_OBJECTS) $(test_write_empty_property_DEPENDENCIES) $(EXTRA_test_write_empty_property_DEPENDENCIES) 
	@rm -f test-write-empty-property$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_write_empty_property_OBJECTS) $(test_write_empty_property_LDADD) $(LIBS)
test-write-full$(EXEEXT): $(test_write_full_OBJECTS) $(test_write_full_DEPENDENCIES) $(EXTRA_test_write_full_DEPENDENCIES) 
	@rm -f test-write-full$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_write_full_OBJECTS) $(test_write_full_LDADD) $(LIBS)
test-write-linefeeds$(EXEEXT): $(test_write_linefeeds_OBJECTS) $(test_write_linefeeds_DEPENDENCIES) $(EXTRA_test_write_linefeeds_DEPENDENCIES) 
	@rm -f test-write-linefeeds$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_write_linefeeds_OBJECTS) $(test_write_linefeeds_LDADD) $(LIBS)
test-write-minimal$(EXEEXT): $(test_write_minimal_OBJECTS) $(test_write_minimal_DEPENDENCIES) $(EXTRA_test_write_minimal_DEPENDENCIES) 
	@rm -f test-write-minimal$(EXEEXT)
	$(AM_V_CCLD)$(LINK) $(test_write_minimal_OBJECTS) $(test_write_minimal_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/gsgf-write-back.Po
include ./$(DEPDIR)/lib.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/test-compose.Po
include ./$(DEPDIR)/test-compressed-list.Po
include ./$(DEPDIR)/test-convert.Po
include ./$(DEPDIR)/test-date.Po
include ./$(DEPDIR)/test-empty.Po
include ./$(DEPDIR)/test-formatd.Po
include ./$(DEPDIR)/test-full.Po
include ./$(DEPDIR)/test-game-info-properties.Po
include ./$(DEPDIR)/test-markup-properties.Po
include ./$(DEPDIR)/test-minimal.Po
include ./$(DEPDIR)/test-misc-properties.Po
include ./$(DEPDIR)/test-move-annotation.Po
include ./$(DEPDIR)/test-move-properties.Po
include ./$(DEPDIR)/test-multi-game-tree.Po
include ./$(DEPDIR)/test-nested-game-tree.Po
include ./$(DEPDIR)/test-node-annotation.Po
include ./$(DEPDIR)/test-non-unique-points.Po
include ./$(DEPDIR)/test-number.Po
include ./$(DEPDIR)/test-real-to-string.Po
include ./$(DEPDIR)/test-real.Po
include ./$(DEPDIR)/test-really-empty.Po
include ./$(DEPDIR)/test-root-properties.Po
include ./$(DEPDIR)/test-setup-properties.Po
include ./$(DEPDIR)/test-timing-properties.Po
include ./$(DEPDIR)/test-util-read-simpletext.Po
include ./$(DEPDIR)/test-util-read-text.Po
include ./$(DEPDIR)/test-write-empty-property.Po
include ./$(DEPDIR)/test-write-empty.Po
include ./$(DEPDIR)/test-write-full.Po
include ./$(DEPDIR)/test-write-linefeeds.Po
include ./$(DEPDIR)/test-write-minimal.Po

.c.o:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c $<

.c.obj:
	$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po
#	$(AM_V_CC)source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<
	$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo
#	$(AM_V_CC)source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(AM_V_CC_no)$(LTCOMPILE) -c -o $@ $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	set x; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	shift; \
	if test -z "$(ETAGS_ARGS)$$*$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  if test $$# -gt 0; then \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      "$$@" $$unique; \
	  else \
	    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	      $$unique; \
	  fi; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '{ files[$$0] = 1; nonempty = 1; } \
	      END { if (nonempty) { for (i in files) print i; }; }'`; \
	test -z "$(CTAGS_ARGS)$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && $(am__cd) $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) "$$here"

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list=' $(TESTS) '; \
	$(am__tty_colors); \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		col=$$red; res=XPASS; \
	      ;; \
	      *) \
		col=$$grn; res=PASS; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *[\ \	]$$tst[\ \	]*) \
		xfail=`expr $$xfail + 1`; \
		col=$$lgn; res=XFAIL; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		col=$$red; res=FAIL; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      col=$$blu; res=SKIP; \
	    fi; \
	    echo "$${col}$$res$${std}: $$tst"; \
	  done; \
	  if test "$$all" -eq 1; then \
	    tests="test"; \
	    All=""; \
	  else \
	    tests="tests"; \
	    All="All "; \
	  fi; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="$$All$$all $$tests passed"; \
	    else \
	      if test "$$xfail" -eq 1; then failures=failure; else failures=failures; fi; \
	      banner="$$All$$all $$tests behaved as expected ($$xfail expected $$failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all $$tests failed"; \
	    else \
	      if test "$$xpass" -eq 1; then passes=pass; else passes=passes; fi; \
	      banner="$$failed of $$all $$tests did not behave as expected ($$xpass unexpected $$passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    if test "$$skip" -eq 1; then \
	      skipped="($$skip test was not run)"; \
	    else \
	      skipped="($$skip tests were not run)"; \
	    fi; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  if test "$$failed" -eq 0; then \
	    col="$$grn"; \
	  else \
	    col="$$red"; \
	  fi; \
	  echo "$${col}$$dashes$${std}"; \
	  echo "$${col}$$banner$${std}"; \
	  test -z "$$skipped" || echo "$${col}$$skipped$${std}"; \
	  test -z "$$report" || echo "$${col}$$report$${std}"; \
	  echo "$${col}$$dashes$${std}"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's/[].[^$$\\*]/\\\\&/g'`; \
	list='$(DISTFILES)'; \
	  dist_files=`for file in $$list; do echo $$file; done | \
	  sed -e "s|^$$srcdirstrip/||;t" \
	      -e "s|^$$topsrcdirstrip/|$(top_builddir)/|;t"`; \
	case $$dist_files in \
	  */*) $(MKDIR_P) `echo "$$dist_files" | \
			   sed '/\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \
			   sort -u` ;; \
	esac; \
	for file in $$dist_files; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  if test -d $$d/$$file; then \
	    dir=`echo "/$$file" | sed -e 's,/[^/]*$$,,'`; \
	    if test -d "$(distdir)/$$file"; then \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -fpR $(srcdir)/$$file "$(distdir)$$dir" || exit 1; \
	      find "$(distdir)/$$file" -type d ! -perm -700 -exec chmod u+rwx {} \;; \
	    fi; \
	    cp -fpR $$d/$$file "$(distdir)$$dir" || exit 1; \
	  else \
	    test -f "$(distdir)/$$file" \
	    || cp -p $$d/$$file "$(distdir)/$$file" \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile $(PROGRAMS) $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	if test -z '$(STRIP)'; then \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	      install; \
	else \
	  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	    install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	    "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'" install; \
	fi
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)
	-test . = "$(srcdir)" || test -z "$(CONFIG_CLEAN_VPATH_FILES)" || rm -f $(CONFIG_CLEAN_VPATH_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool \
	clean-noinstPROGRAMS mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

html-am:

info: info-am

info-am:

install-data-am:

install-dvi: install-dvi-am

install-dvi-am:

install-exec-am:

install-html: install-html-am

install-html-am:

install-info: install-info-am

install-info-am:

install-man:

install-pdf: install-pdf-am

install-pdf-am:

install-ps: install-ps-am

install-ps-am:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am:

.MAKE: check-am install-am install-strip

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool \
	clean-noinstPROGRAMS ctags distclean distclean-compile \
	distclean-generic distclean-libtool distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-data install-data-am install-dvi install-dvi-am \
	install-exec install-exec-am install-html install-html-am \
	install-info install-info-am install-man install-pdf \
	install-pdf-am install-ps install-ps-am install-strip \
	installcheck installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am


# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
